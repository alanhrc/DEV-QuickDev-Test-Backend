generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Users {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  password   String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  // name String @db.VarChar(100) Sqlite not workin length
  // email String @unique @db.VarChar(191) Sqlite not workin length

  posts    Posts[]
  comments Comments[]

  @@map("users")
}

model Posts {
  id          String    @id @default(uuid())
  user        Users     @relation(fields: [user_id], references: [id])
  user_id     String
  title       String
  description String
  created_at  DateTime? @default(now())
  updated_at  DateTime? @default(now())
  // title String @db.VarChar(100) Sqlite not workin length
  // description String @db.Text Sqlite not workin length

  views    Int @default(0)
  likes    Int @default(0)
  dislikes Int @default(0)

  comments      Comments[]
  uploadedFiles UploadedFiles[]

  @@map("posts")
}

model Comments {
  id              String    @id @default(uuid())
  user            Users?    @relation(fields: [user_id], references: [id])
  user_id         String?
  post            Posts?    @relation(fields: [post_id], references: [id])
  post_id         String?
  // description String @db.Text  Sqlite not workin length
  description     String
  removeOwnerPost Boolean?  @default(false)
  created_at      DateTime? @default(now())
  updated_at      DateTime? @default(now())

  @@map("comments")
}

model UploadedFiles {
  id         String    @id @default(uuid())
  post       Posts     @relation(fields: [post_id], references: [id])
  post_id    String
  path       String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("uploadedFiles")
}
